{
  "address": "0x12F64E0410Fb551932b4a9CD7079E01B51727BAc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "configType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DefaultConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "defaultAntiBotConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "antiBotDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuyAmountEarly",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWalletPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cooldownPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBuyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultCircuitBreakerConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxPriceImpact",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volatilityWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxVolatilityMoves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "circuitBreakerDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultWhaleLimitConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "whaleThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whaleDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTradeSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSellPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAntiBotConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "antiBotDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyAmountEarly",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWalletPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cooldownPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.AntiBotConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCircuitBreakerConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxPriceImpact",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "volatilityWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVolatilityMoves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circuitBreakerDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.CircuitBreakerConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "buyFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.FeeConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhaleLimitConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "whaleThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "whaleDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.WhaleLimitConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "antiBotDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuyAmountEarly",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWalletPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cooldownPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBuyAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.AntiBotConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "updateDefaultAntiBotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxPriceImpact",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "volatilityWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVolatilityMoves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circuitBreakerDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.CircuitBreakerConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "updateDefaultCircuitBreakerConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "buyFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.FeeConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "updateDefaultFeeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "whaleThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "whaleDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTradeSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSellPercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarbonCoinConfig.WhaleLimitConfig",
          "name": "newConfig",
          "type": "tuple"
        }
      ],
      "name": "updateDefaultWhaleLimitConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80e52f455690a444130c4c16574c0837b39207fbd49195c844f2294706e1ecc5",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x2BB8CBAd36D52708a43DE36a9Aa2782fFa0470F1",
    "contractAddress": "0x12F64E0410Fb551932b4a9CD7079E01B51727BAc",
    "transactionIndex": 0,
    "gasUsed": "13917986",
    "logsBloom": "0x
    "blockHash": "0x6e33f53b26ada5fd752e9e658ac39c4309581147da2f32eed08d596aacadec89",
    "transactionHash": "0x80e52f455690a444130c4c16574c0837b39207fbd49195c844f2294706e1ecc5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 208095259,
        "transactionHash": "0x80e52f455690a444130c4c16574c0837b39207fbd49195c844f2294706e1ecc5",
        "address": "0x12F64E0410Fb551932b4a9CD7079E01B51727BAc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bb8cbad36d52708a43de36a9aa2782ffa0470f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6e33f53b26ada5fd752e9e658ac39c4309581147da2f32eed08d596aacadec89"
      }
    ],
    "blockNumber": 208095259,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "97ce927e5414bcdfba66ed74fe93f8f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"configType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DefaultConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defaultAntiBotConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"antiBotDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmountEarly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCircuitBreakerConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceImpact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatilityWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVolatilityMoves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitBreakerDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWhaleLimitConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"whaleThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAntiBotConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"antiBotDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmountEarly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.AntiBotConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCircuitBreakerConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceImpact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatilityWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVolatilityMoves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitBreakerDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.CircuitBreakerConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.FeeConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhaleLimitConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"whaleThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.WhaleLimitConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"antiBotDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyAmountEarly\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.AntiBotConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"updateDefaultAntiBotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceImpact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatilityWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVolatilityMoves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitBreakerDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.CircuitBreakerConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"updateDefaultCircuitBreakerConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.FeeConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"updateDefaultFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"whaleThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whaleDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarbonCoinConfig.WhaleLimitConfig\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"updateDefaultWhaleLimitConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CarbonCoinConfig.sol\":\"CarbonCoinConfig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/CarbonCoinConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// CarbonCoinConfig.sol\\n// Copyright (c) 2025 CarbonOpus\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n//\\n\\npragma solidity 0.8.27;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ICarbonCoinConfig } from \\\"./interface/ICarbonCoinConfig.sol\\\";\\n\\n\\ncontract CarbonCoinConfig is ICarbonCoinConfig, Ownable {\\n  // Default configurations\\n  FeeConfig public defaultFeeConfig;\\n  AntiBotConfig public defaultAntiBotConfig;\\n  CircuitBreakerConfig public defaultCircuitBreakerConfig;\\n  WhaleLimitConfig public defaultWhaleLimitConfig;\\n\\n  constructor() Ownable() {\\n    defaultFeeConfig = FeeConfig({\\n      buyFee: 30,  // 0.3%\\n      sellFee: 0,  // 0%\\n      maxFee: 300  // 3% max\\n    });\\n\\n    defaultAntiBotConfig = AntiBotConfig({\\n      antiBotDuration: 60,        // 60 seconds\\n      maxBuyAmountEarly: 1 ether, // Max 1 ETH during launch\\n      maxWalletPercentage: 300,   // 3% of supply\\n      cooldownPeriod: 10,         // 10 seconds between buys\\n      minBuyAmount: 0.001 ether   // Prevent dust attacks\\n    });\\n\\n    defaultCircuitBreakerConfig = CircuitBreakerConfig({\\n      maxPriceImpact: 1000,           // 10%\\n      volatilityWindow: 5 minutes,\\n      maxVolatilityMoves: 5,\\n      circuitBreakerDuration: 10 minutes\\n    });\\n\\n    defaultWhaleLimitConfig = WhaleLimitConfig({\\n      whaleThreshold: 10 ether,   // 10 ETH+ is whale\\n      whaleDelay: 2 minutes,      // 2 min delay\\n      maxTradeSize: 30 ether,     // Max 30 ETH per trade\\n      maxSellPercentage: 300      // Max 3% of supply per sell\\n    });\\n  }\\n\\n  function getFeeConfig() public view returns (FeeConfig memory) {\\n    return defaultFeeConfig;\\n  }\\n\\n  function getAntiBotConfig() public view returns (AntiBotConfig memory) {\\n    return defaultAntiBotConfig;\\n  }\\n\\n  function getCircuitBreakerConfig() public view returns (CircuitBreakerConfig memory) {\\n    return defaultCircuitBreakerConfig;\\n  }\\n\\n  function getWhaleLimitConfig() public view returns (WhaleLimitConfig memory) {\\n    return defaultWhaleLimitConfig;\\n  }\\n\\n  function updateDefaultFeeConfig(FeeConfig memory newConfig) external onlyOwner {\\n    require(newConfig.maxFee <= 2000, \\\"Max fee too high\\\");\\n    require(newConfig.buyFee <= newConfig.maxFee, \\\"Buy fee exceeds max\\\");\\n    require(newConfig.sellFee <= newConfig.maxFee, \\\"Sell fee exceeds max\\\");\\n\\n    defaultFeeConfig = newConfig;\\n    emit DefaultConfigUpdated(\\\"Fee\\\", block.timestamp);\\n  }\\n\\n  function updateDefaultAntiBotConfig(AntiBotConfig memory newConfig) external onlyOwner {\\n    require(newConfig.antiBotDuration > 0, \\\"Invalid duration\\\");\\n    require(newConfig.maxWalletPercentage <= 10000, \\\"Invalid wallet percentage\\\");\\n    require(newConfig.cooldownPeriod <= 300, \\\"Cooldown too long\\\");\\n    require(newConfig.minBuyAmount > 0, \\\"Invalid min buy\\\");\\n\\n    defaultAntiBotConfig = newConfig;\\n    emit DefaultConfigUpdated(\\\"AntiBot\\\", block.timestamp);\\n  }\\n\\n  function updateDefaultCircuitBreakerConfig(CircuitBreakerConfig memory newConfig) external onlyOwner {\\n    require(newConfig.maxPriceImpact > 0 && newConfig.maxPriceImpact <= 5000, \\\"Invalid price impact\\\");\\n    require(newConfig.volatilityWindow > 0, \\\"Invalid window\\\");\\n    require(newConfig.maxVolatilityMoves > 0, \\\"Invalid moves\\\");\\n    require(newConfig.circuitBreakerDuration > 0, \\\"Invalid duration\\\");\\n\\n    defaultCircuitBreakerConfig = newConfig;\\n    emit DefaultConfigUpdated(\\\"CircuitBreaker\\\", block.timestamp);\\n  }\\n\\n  function updateDefaultWhaleLimitConfig(WhaleLimitConfig memory newConfig) external onlyOwner {\\n    require(newConfig.whaleThreshold > 0, \\\"Invalid threshold\\\");\\n    require(newConfig.whaleDelay > 0, \\\"Invalid delay\\\");\\n    require(newConfig.maxTradeSize > 0, \\\"Invalid trade size\\\");\\n    require(newConfig.maxSellPercentage <= 10000, \\\"Invalid sell percentage\\\");\\n\\n    defaultWhaleLimitConfig = newConfig;\\n    emit DefaultConfigUpdated(\\\"WhaleLimit\\\", block.timestamp);\\n  }\\n}\",\"keccak256\":\"0xe27f663f99a8294a086a4997722696cd825becc55d62c35f19e88607bf5824e3\",\"license\":\"MIT\"},\"contracts/interface/ICarbonCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ICarbonCoin.sol\\n// Copyright (c) 2025 CarbonOpus\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n//\\n\\npragma solidity 0.8.27;\\n\\ninterface ICarbonCoin {\\n  struct BondingCurveConfig {\\n    uint256 virtualEth;\\n    uint256 virtualTokens;\\n    uint256 maxSupply;\\n    uint256 graduationThreshold;\\n  }\\n\\n  struct PriceSnapshot {\\n    uint256 price;\\n    uint256 timestamp;\\n  }\\n\\n  struct WhaleIntent {\\n    uint256 amount;\\n    uint256 intentTime;\\n    bool isBuy;\\n    bool executed;\\n  }\\n\\n  // Trading events\\n  event TokensPurchased(\\n    address indexed buyer,\\n    uint256 ethIn,\\n    uint256 tokensOut,\\n    uint256 newPrice,\\n    uint256 realEthReserves,\\n    uint256 realTokenSupply,\\n    uint256 timestamp\\n  );\\n  event TokensSold(\\n    address indexed seller,\\n    uint256 tokensIn,\\n    uint256 ethOut,\\n    uint256 newPrice,\\n    uint256 realEthReserves,\\n    uint256 realTokenSupply,\\n    uint256 timestamp\\n  );\\n\\n  // Lifecycle events\\n  event TokenDeployed(\\n    address indexed token,\\n    address indexed creator,\\n    string name,\\n    string symbol,\\n    uint256 maxSupply,\\n    uint256 graduationThreshold,\\n    uint256 timestamp\\n  );\\n  event Graduated(\\n    address indexed token,\\n    address indexed pair,\\n    uint256 liquidityTokens,\\n    uint256 liquidityEth,\\n    uint256 finalPrice,\\n    uint256 timestamp\\n  );\\n\\n  // Admin events\\n  event BotDetected(address indexed suspect, string reason, uint256 timestamp);\\n  event AddressBlacklisted(address indexed account, bool blacklisted, uint256 timestamp);\\n  event AddressWhitelisted(address indexed account, bool whitelisted, uint256 timestamp);\\n  event EmergencyWithdraw(address indexed to, uint256 amount, uint256 timestamp);\\n  event TradingPaused(uint256 timestamp);\\n  event TradingUnpaused(uint256 timestamp);\\n\\n  // Circuit breaker events\\n  event CircuitBreakerTriggered(string reason, uint256 timestamp, uint256 duration);\\n  event CircuitBreakerReset(uint256 timestamp);\\n  event HighPriceImpact(address indexed trader, uint256 priceImpact, uint256 timestamp);\\n  event VolatilityWarning(uint256 moveCount, uint256 timestamp);\\n\\n  // Whale protection events\\n  event WhaleIntentRegistered(address indexed trader, uint256 amount, bool isBuy, uint256 executeAfter, uint256 timestamp);\\n  event WhaleIntentCancelled(address indexed trader, uint256 timestamp);\\n  event WhaleTradeExecuted(address indexed trader, uint256 amount, bool isBuy, uint256 timestamp);\\n\\n  // State tracking events\\n  event PriceUpdate(uint256 price, uint256 ethReserves, uint256 tokenSupply, uint256 timestamp);\\n  event LiquiditySnapshot(uint256 ethReserves, uint256 tokenSupply, uint256 timestamp);\\n\\n  error Unauthorized();\\n  error InvalidAmount();\\n  error ExceedsMaxSupply();\\n  error SlippageTooHigh();\\n  error InsufficientLiquidity();\\n  error AlreadyGraduated();\\n  error NotGraduated();\\n  error CooldownActive();\\n  error ExceedsMaxWallet();\\n  error Blacklisted();\\n  error ContractCallNotAllowed();\\n  error BuyAmountTooHigh();\\n  error FeeExceedsMaximum();\\n  error GraduationCooldownActive();\\n  error CircuitBreakerActive();\\n  error PriceImpactTooHigh();\\n  error ExcessiveVolatility();\\n  error TradeSizeTooLarge();\\n  error WhaleDelayActive();\\n  error WhaleIntentRequired();\\n  error WhaleIntentNotReady();\\n  error NoWhaleIntentFound();\\n  error SellAmountTooLarge();\\n\\n  function getCurrentPrice() external view returns (uint256);\\n\\n  function calculateTokensOut(uint256 ethIn) external view returns (uint256);\\n\\n  function calculateEthIn(uint256 tokensOut) external view returns (uint256);\\n\\n  function calculateEthOut(uint256 tokensIn) external view returns (uint256);\\n\\n  function buy(uint256 minTokensOut) external payable;\\n\\n  function sell(uint256 tokensIn, uint256 minEthOut) external;\\n\\n  function forceGraduate() external;\\n\\n  function blacklistAddress(address account, bool blacklisted) external;\\n\\n  function addToWhitelist(address account) external;\\n\\n  function removeFromWhitelist(address account) external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function emergencyWithdraw() external;\\n\\n  function triggerCircuitBreaker(string memory reason) external;\\n\\n  function resetCircuitBreaker() external;\\n\\n  function getCircuitBreakerStatus() external view returns (\\n    bool isActive,\\n    uint256 triggeredAt,\\n    uint256 timeRemaining,\\n    uint256 volatilityMoves\\n  );\\n\\n  function cancelWhaleIntent() external;\\n\\n  function getWhaleIntent(address trader) external view returns (\\n    uint256 amount,\\n    uint256 intentTime,\\n    uint256 executeAfter,\\n    bool isBuy,\\n    bool executed,\\n    bool canExecute\\n  );\\n\\n  function getWhaleCooldown(address trader) external view returns (\\n    uint256 lastTradeTime,\\n    uint256 nextTradeAvailable,\\n    bool canTradeNow\\n  );\\n\\n  function getTradeLimits() external view returns (\\n    uint256 _maxTradeSize,\\n    uint256 _maxSellPercentage,\\n    uint256 _whaleThreshold,\\n    uint256 _whaleDelay,\\n    uint256 currentMaxSellTokens\\n  );\\n\\n  function getAntiBotInfo() external view returns (\\n    uint256 _launchTime,\\n    uint256 _timeSinceLaunch,\\n    bool _antiBotActive,\\n    uint256 _maxBuyEarly,\\n    uint256 _cooldownPeriod,\\n    uint256 _maxWalletPercentage\\n  );\\n\\n  function getUserCooldown(address user) external view returns (uint256);\\n\\n  function getReserves() external view returns (\\n    uint256 ethReserves,\\n    uint256 tokenSupply,\\n    uint256 virtualEth,\\n    uint256 virtualTokens\\n  );\\n}\\n\",\"keccak256\":\"0x905daea319360086d09f763fbdbe62f66ee41c50025483af1a0bc93388a78ff3\",\"license\":\"MIT\"},\"contracts/interface/ICarbonCoinConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// ICarbonCoinConfig.sol\\n// Copyright (c) 2025 CarbonOpus\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n//\\n\\npragma solidity 0.8.27;\\n\\nimport { ICarbonCoin } from \\\"./ICarbonCoin.sol\\\";\\n\\ninterface ICarbonCoinConfig {\\n  struct FeeConfig {\\n    uint256 buyFee;\\n    uint256 sellFee;\\n    uint256 maxFee;\\n  }\\n\\n  struct AntiBotConfig {\\n    uint256 antiBotDuration;\\n    uint256 maxBuyAmountEarly;\\n    uint256 maxWalletPercentage;\\n    uint256 cooldownPeriod;\\n    uint256 minBuyAmount;\\n  }\\n\\n  struct CircuitBreakerConfig {\\n    uint256 maxPriceImpact;\\n    uint256 volatilityWindow;\\n    uint256 maxVolatilityMoves;\\n    uint256 circuitBreakerDuration;\\n  }\\n\\n  struct WhaleLimitConfig {\\n    uint256 whaleThreshold;\\n    uint256 whaleDelay;\\n    uint256 maxTradeSize;\\n    uint256 maxSellPercentage;\\n  }\\n\\n  event DefaultConfigUpdated(string configType, uint256 timestamp);\\n\\n  function updateDefaultFeeConfig(FeeConfig memory newConfig) external;\\n\\n  function updateDefaultAntiBotConfig(AntiBotConfig memory newConfig) external;\\n\\n  function updateDefaultCircuitBreakerConfig(CircuitBreakerConfig memory newConfig) external;\\n\\n  function updateDefaultWhaleLimitConfig(WhaleLimitConfig memory newConfig) external;\\n\\n  function getFeeConfig() external view returns (FeeConfig memory);\\n  function getAntiBotConfig() external view returns (AntiBotConfig memory);\\n  function getCircuitBreakerConfig() external view returns (CircuitBreakerConfig memory);\\n  function getWhaleLimitConfig() external view returns (WhaleLimitConfig memory);\\n\\n}\\n\",\"keccak256\":\"0x7b70121866384b3cf9999f18adf55f49433749347b73dc7cb6943643b403a3c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346101a25760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3604051606081016001600160401b0381118282101761018c5761012c916040918252601e8152600060208201520152601e600155600060025561012c60035560405160a0810181811060018060401b0382111761018c5766038d7ea4c6800091608091604052603c8152670de0b6b3a7640000602082015261012c6040820152600a60608201520152603c600455670de0b6b3a764000060055561012c600655600a60075566038d7ea4c680006008556101066101a7565b6103e881526020810161012c8152604082019060058252606083019261025884525160095551600a5551600b5551600c5561013f6101a7565b678ac7230489e800008152602081016078815260408201906801a055690d9db800008252606083019261012c845251600d5551600e5551600f5551601055604051610c1890816101c78239f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b60405190608082016001600160401b0381118382101761018c5760405256fe6080604052600436101561001257600080fd5b60003560e01c8063013d33c1146108e9578063338bc47d146107625780633e12723814610722578063562528f7146106945780635fbbc0d214610633578063715018a6146105da57806374f46175146105a05780638da5cb5b14610577578063904c206b14610418578063982dc306146103ac5780639e2877b21461037d578063a7b005f914610239578063ba522594146101ff578063f2fde38b146101345763fca53bea146100c157600080fd5b3461012f57600036600319011261012f576100da610b46565b5060806100e5610ab3565b600d548152600e546020820152600f546040820152601054606082015261012d6040518092606080918051845260208101516020850152604081015160408501520151910152565bf35b600080fd5b3461012f57602036600319011261012f576004356001600160a01b0381169081900361012f57610162610b6a565b80156101ab57600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461012f57600036600319011261012f57600d54600e54600f54601054604080519485526020850193909352918301526060820152608090f35b3461012f57606036600319011261012f57610252610a93565b600435815260208101602435815260408201916044358352610272610b6a565b6107d083511161034557805183511061030a5781518351106102ce57516001555160025551600355600080516020610bc3833981519152608060405160408152600360408201526246656560e81b6060820152426020820152a1005b60405162461bcd60e51b81526020600482015260146024820152730a6cad8d840cccaca40caf0c6cacac8e640dac2f60631b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272084eaf240cccaca40caf0c6cacac8e640dac2f606b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f09ac2f040cccaca40e8dede40d0d2ced60831b6044820152606490fd5b3461012f57600036600319011261012f5760606001546002546003549060405192835260208301526040820152f35b3461012f57600036600319011261012f576103c5610b46565b5060806103d0610ab3565b6009548152600a546020820152600b546040820152600c54606082015261012d6040518092606080918051845260208101516020850152604081015160408501520151910152565b3461012f57608036600319011261012f5761043236610ad3565b61043a610b6a565b8051801515908161056a575b501561052e57602081018051156104f85760408201908151156104c357606083019261047484511515610b07565b5160095551600a5551600b5551600c55600080516020610bc3833981519152608060405160408152600e60408201526d21b4b931bab4ba213932b0b5b2b960911b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206d6f76657360981b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642077696e646f7760901b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081c1c9a58d9481a5b5c1858dd60621b6044820152606490fd5b6113889150111582610446565b3461012f57600036600319011261012f576000546040516001600160a01b039091168152602090f35b3461012f57600036600319011261012f57600954600a54600b54600c54604080519485526020850193909352918301526060820152608090f35b3461012f57600036600319011261012f576105f3610b6a565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461012f57600036600319011261012f5760006040610650610a93565b82815282602082015201526060610665610a93565b600154908181526002546020820190815260406003549201918252604051928352516020830152516040820152f35b3461012f57600036600319011261012f57600060806106b1610a5d565b828152826020820152826040820152826060820152015260a06106d2610a5d565b600454908181526005546020820190815260065460408301908152600754916060840192835260806008549401938452604051948552516020850152516040840152516060830152516080820152f35b3461012f57600036600319011261012f5760a060045460055460065460075490600854926040519485526020850152604084015260608301526080820152f35b3461012f57608036600319011261012f5761077c36610ad3565b610784610b6a565b8051156108b0576020810180511561087b5760408201908151156108415760608301926127108451116107fc5751600d5551600e5551600f5551601055600080516020610bc3833981519152608060405160408152600a60408201526915da185b19531a5b5a5d60b21b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073656c6c2070657263656e746167650000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642074726164652073697a6560701b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642064656c617960981b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606490fd5b3461012f5760a036600319011261012f57610902610a5d565b60043581526020810160243581526040820160443581526060830191606435835260808401936084358552610935610b6a565b61094181511515610b07565b612710835111610a185761012c8451116109df578451156109a8575160045551600555516006555160075551600855600080516020610bc38339815191526080604051604081526007604082015266105b9d1a509bdd60ca1b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206d696e2062757960881b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270436f6f6c646f776e20746f6f206c6f6e6760781b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c69642077616c6c65742070657263656e74616765000000000000006044820152606490fd5b6040519060a0820182811067ffffffffffffffff821117610a7d57604052565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff821117610a7d57604052565b604051906080820182811067ffffffffffffffff821117610a7d57604052565b608090600319011261012f57610ae7610ab3565b906004358252602435602083015260443560408301526064356060830152565b15610b0e57565b60405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606490fd5b610b4e610ab3565b9060008252600060208301526000604083015260006060830152565b6000546001600160a01b03163303610b7e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe6349e7d5485ec4d3eed63522db9d37a0b4d65b793aed12e82a8d96e05c210306a2646970667358221220b1d0a82e5ac44d552cc26ad607493b600dd105b077d1539f36204f0973f9bb4764736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063013d33c1146108e9578063338bc47d146107625780633e12723814610722578063562528f7146106945780635fbbc0d214610633578063715018a6146105da57806374f46175146105a05780638da5cb5b14610577578063904c206b14610418578063982dc306146103ac5780639e2877b21461037d578063a7b005f914610239578063ba522594146101ff578063f2fde38b146101345763fca53bea146100c157600080fd5b3461012f57600036600319011261012f576100da610b46565b5060806100e5610ab3565b600d548152600e546020820152600f546040820152601054606082015261012d6040518092606080918051845260208101516020850152604081015160408501520151910152565bf35b600080fd5b3461012f57602036600319011261012f576004356001600160a01b0381169081900361012f57610162610b6a565b80156101ab57600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461012f57600036600319011261012f57600d54600e54600f54601054604080519485526020850193909352918301526060820152608090f35b3461012f57606036600319011261012f57610252610a93565b600435815260208101602435815260408201916044358352610272610b6a565b6107d083511161034557805183511061030a5781518351106102ce57516001555160025551600355600080516020610bc3833981519152608060405160408152600360408201526246656560e81b6060820152426020820152a1005b60405162461bcd60e51b81526020600482015260146024820152730a6cad8d840cccaca40caf0c6cacac8e640dac2f60631b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272084eaf240cccaca40caf0c6cacac8e640dac2f606b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f09ac2f040cccaca40e8dede40d0d2ced60831b6044820152606490fd5b3461012f57600036600319011261012f5760606001546002546003549060405192835260208301526040820152f35b3461012f57600036600319011261012f576103c5610b46565b5060806103d0610ab3565b6009548152600a546020820152600b546040820152600c54606082015261012d6040518092606080918051845260208101516020850152604081015160408501520151910152565b3461012f57608036600319011261012f5761043236610ad3565b61043a610b6a565b8051801515908161056a575b501561052e57602081018051156104f85760408201908151156104c357606083019261047484511515610b07565b5160095551600a5551600b5551600c55600080516020610bc3833981519152608060405160408152600e60408201526d21b4b931bab4ba213932b0b5b2b960911b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206d6f76657360981b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642077696e646f7760901b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081c1c9a58d9481a5b5c1858dd60621b6044820152606490fd5b6113889150111582610446565b3461012f57600036600319011261012f576000546040516001600160a01b039091168152602090f35b3461012f57600036600319011261012f57600954600a54600b54600c54604080519485526020850193909352918301526060820152608090f35b3461012f57600036600319011261012f576105f3610b6a565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461012f57600036600319011261012f5760006040610650610a93565b82815282602082015201526060610665610a93565b600154908181526002546020820190815260406003549201918252604051928352516020830152516040820152f35b3461012f57600036600319011261012f57600060806106b1610a5d565b828152826020820152826040820152826060820152015260a06106d2610a5d565b600454908181526005546020820190815260065460408301908152600754916060840192835260806008549401938452604051948552516020850152516040840152516060830152516080820152f35b3461012f57600036600319011261012f5760a060045460055460065460075490600854926040519485526020850152604084015260608301526080820152f35b3461012f57608036600319011261012f5761077c36610ad3565b610784610b6a565b8051156108b0576020810180511561087b5760408201908151156108415760608301926127108451116107fc5751600d5551600e5551600f5551601055600080516020610bc3833981519152608060405160408152600a60408201526915da185b19531a5b5a5d60b21b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642073656c6c2070657263656e746167650000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271496e76616c69642074726164652073697a6560701b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642064656c617960981b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606490fd5b3461012f5760a036600319011261012f57610902610a5d565b60043581526020810160243581526040820160443581526060830191606435835260808401936084358552610935610b6a565b61094181511515610b07565b612710835111610a185761012c8451116109df578451156109a8575160045551600555516006555160075551600855600080516020610bc38339815191526080604051604081526007604082015266105b9d1a509bdd60ca1b6060820152426020820152a1005b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206d696e2062757960881b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270436f6f6c646f776e20746f6f206c6f6e6760781b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f496e76616c69642077616c6c65742070657263656e74616765000000000000006044820152606490fd5b6040519060a0820182811067ffffffffffffffff821117610a7d57604052565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff821117610a7d57604052565b604051906080820182811067ffffffffffffffff821117610a7d57604052565b608090600319011261012f57610ae7610ab3565b906004358252602435602083015260443560408301526064356060830152565b15610b0e57565b60405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b210323ab930ba34b7b760811b6044820152606490fd5b610b4e610ab3565b9060008252600060208301526000604083015260006060830152565b6000546001600160a01b03163303610b7e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe6349e7d5485ec4d3eed63522db9d37a0b4d65b793aed12e82a8d96e05c210306a2646970667358221220b1d0a82e5ac44d552cc26ad607493b600dd105b077d1539f36204f0973f9bb4764736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3768,
        "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
        "label": "defaultFeeConfig",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(FeeConfig)4937_storage"
      },
      {
        "astId": 3771,
        "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
        "label": "defaultAntiBotConfig",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AntiBotConfig)4948_storage"
      },
      {
        "astId": 3774,
        "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
        "label": "defaultCircuitBreakerConfig",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(CircuitBreakerConfig)4957_storage"
      },
      {
        "astId": 3777,
        "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
        "label": "defaultWhaleLimitConfig",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(WhaleLimitConfig)4966_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_struct(AntiBotConfig)4948_storage": {
        "encoding": "inplace",
        "label": "struct ICarbonCoinConfig.AntiBotConfig",
        "members": [
          {
            "astId": 4939,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "antiBotDuration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4941,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxBuyAmountEarly",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4943,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxWalletPercentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4945,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "cooldownPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4947,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "minBuyAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(CircuitBreakerConfig)4957_storage": {
        "encoding": "inplace",
        "label": "struct ICarbonCoinConfig.CircuitBreakerConfig",
        "members": [
          {
            "astId": 4950,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxPriceImpact",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4952,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "volatilityWindow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4954,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxVolatilityMoves",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4956,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "circuitBreakerDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FeeConfig)4937_storage": {
        "encoding": "inplace",
        "label": "struct ICarbonCoinConfig.FeeConfig",
        "members": [
          {
            "astId": 4932,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "buyFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4934,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "sellFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4936,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WhaleLimitConfig)4966_storage": {
        "encoding": "inplace",
        "label": "struct ICarbonCoinConfig.WhaleLimitConfig",
        "members": [
          {
            "astId": 4959,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "whaleThreshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4961,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "whaleDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4963,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxTradeSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4965,
            "contract": "contracts/CarbonCoinConfig.sol:CarbonCoinConfig",
            "label": "maxSellPercentage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}